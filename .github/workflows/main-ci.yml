name: Main CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel previous runs if a new commit is pushed to the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # Stage 1: Fast checks that can fail quickly
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for spelling errors
        uses: codespell-project/actions-codespell@v2
        with:
          ignore_words_file: .codespellignore

      - name: Check ASCII compliance in README files
        run: |
          python3 scripts/asciicheck.py README.md
          python3 scripts/asciicheck.py codex-cli/README.md

      - name: Check README table of contents
        run: |
          python3 scripts/readme_toc.py README.md
          python3 scripts/readme_toc.py codex-cli/README.md

  # Stage 2: Node.js/TypeScript checks
  nodejs-checks:
    name: Node.js/TypeScript
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "store_path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Check release staging
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./codex-cli/scripts/stage_release.sh

  # Stage 3: Rust format and lint checks
  rust-format-lint:
    name: Rust Format & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks
    defaults:
      run:
        working-directory: codex-rs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@1.89
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt -- --config imports_granularity=Item --check

      - name: Run clippy
        run: cargo clippy --all-features --tests -- -D warnings

  # Stage 4: Rust build and test (Linux only for speed)
  rust-build-test:
    name: Rust Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [rust-format-lint]
    defaults:
      run:
        working-directory: codex-rs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@1.89

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ${{ github.workspace }}/codex-rs/target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build workspace
        run: cargo build --all-features

      - name: Check individual crates
        run: |
          find . -name Cargo.toml -mindepth 2 -maxdepth 2 -print0 | \
            xargs -0 -n1 -I{} bash -c 'cd "$(dirname "{}")" && cargo check'

      - name: Run tests
        run: cargo test --all-features
        env:
          RUST_BACKTRACE: 1

  # Stage 5: Docker integration test
  docker-integration:
    name: Docker Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [nodejs-checks, rust-build-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build containers
        run: docker compose -f docker-compose.yaml build

      - name: Start stack
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: docker compose -f docker-compose.ci.yaml up -d

      - name: Run self-check
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: bin/self-check.sh

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.ci.yaml down -v

  # Final stage: Summary
  ci-success:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [quick-checks, nodejs-checks, rust-format-lint, rust-build-test, docker-integration]
    if: always()
    steps:
      - name: Check all jobs succeeded
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "One or more CI jobs failed:"
          echo "quick-checks: ${{ needs.quick-checks.result }}"
          echo "nodejs-checks: ${{ needs.nodejs-checks.result }}"
          echo "rust-format-lint: ${{ needs.rust-format-lint.result }}"
          echo "rust-build-test: ${{ needs.rust-build-test.result }}"
          echo "docker-integration: ${{ needs.docker-integration.result }}"
          exit 1

      - name: Success
        run: echo "ðŸŽ‰ All CI checks passed!"
